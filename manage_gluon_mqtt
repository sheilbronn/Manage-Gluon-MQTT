#!/usr/bin/env ash
# shellcheck shell=ash

#
# manage_gluon_mqtt
#
# Monitor and control Freifunk nodes (Gluon) - by command line and MQTT
#
# Repo: https://github.com/sheilbronn/Manage-Gluon-MQTT
#

# Some fixed constants and prelimenary (fixed) settings ....

wifiupsleep="7" # seconds to sleep after "wifi up"
gluondir="/lib/gluon"
sitecode="" #  will be set to something like "ffmuc".... but you could also freeze it here
macidsfile="/srv/openhab-conf/phones" # file is only for presence detection in mapping known phones to known people at....

_cmv()     {  command -v "$@" > /dev/null ; } # find out whether a command exists
_tolower() {  { [ "$*" ] && echo "$*" || cat ; } | awk -- '{ print tolower($0) }' ; }

if _cmv busybox ; then
	alias awk="busybox awk"
	alias sed="busybox sed"
	alias tr="busybox tr"
fi
	alias e="/bin/echo" # /bin/echo needed for color generalized interpretation, in case -e not understood
	alias l="local" # needed when compressing script for reduced storage

set -o noglob  # noglob will limit security and escaping problems
sName="${0##*/}" && sName="${sName%.sh}"
sID="$( basename "${sName}" .sh )" # sID="${sID}433"
sMID="$sID"
sManufacturer="Linux"

sUserConfigDir="$HOME/.${sName%.sh}"
sArea="$( cat /proc/sys/kernel/hostname 2>/dev/null || hostname || e "unknown" )"
[ "$sArea" = "openHABianPi" -o "$sArea" = "unknown" ] && sArea="${sArea}-$( awk -F ":" -e '{ print $5$6 }' < /sys/class/net/eth0/address )"
sArea="$( _tolower "$sArea" )" # lowercase only
sSsidBase="UNKNOWN" # would be an an error
sPubIfs="" # will be determined on first call, then cached
nMqttSleep=1199 # 1190
sHassTopicPrefix="homeassistant/sensor" 
basetopic="xyz"                  # default MQTT topic prefix

ifipv6="bat0" # maybe assumption to broad, need error reports
sGrepSsid=".*"

umask -S u=rwx,g=rx,o= # no rights for others
alias _nx="local - ; set +x"

# Notes for future enhancements:
# ping ff host and up/down own public if accordingly
# ( ping -c 3 2001:608:a01:103:62e3:27ff:febd:b8ba && echo yes ) || echo no
# ( ping -c 3 2001:608:a01:103:62e3:27ff:febd:b8be && ( ( iwinfo | grep $sPubIf0 ) || ( wifi up ; echo wifi upped. ) ) ) || ( iw dev client0 del ; echo if downed )
# scan repeatedly for public Wifi and up/down own public if accordingly:
# ( { for i in 1 1 1 1 2 ; do iw dev mesh0 scan ; sleep $i ; done } | fgrep -w '6e:a3:09:ea:31:e1' && ( ( iwinfo | grep $sPubIf0 ) || ( wifi up ; echo wifi upped. ) ) ) || ( iw dev $sPubIf0 del ; echo if downed )
# ( { for i in 1 2 2 ; do iw dev mesh0 scan ; sleep $i ; done } | egrep -A 9 -w '6e:a3:09:ea:31:e0' | grep SSID:.muenchen.freifunk.net/muc_sued && ( ( iwinfo | grep $sPubIf0 ) || ( wifi up ; echo wifi upped. ) ) ) || ( iwinfo | grep $sPubIf0 && iw dev $sPubIf0 del ; echo if downed )

show_help() {
	echo "Usage: $sName ... -v -c command ...
   Execute arbitrary as well as predefined commands on Freifunk nodes using uci and other commands. Return values on stdout or MQTT.
   Either, automatic (e.g. key-based) access to the Freifunk node using SSH or _xecution is possible." 1>&2
}

sort_and_tail_file() {
	_nx
	l _tmpfile="$tmpdir/tailfile"
	l _fn="$1"
	l _tailcnt="${2:-20}"
	local _colno="${3:-1}"

	[ -r "$_fn" ] && [ -w "$_fn" ] && sort -k $(( _colno + 1 )) "$_fn" | uniq -f "$_colno" | tail -"$_tailcnt" | sort -k $(( _colno + 1 )) > $_tmpfile \
		&& cat "$_tmpfile" > "$_fn" && rm -f "$_tmpfile"
	[ "$bMoreVerbose" ] && debug "sort_and_tail_file($1,$2,$3): lines: $( wc -l < "$1" )"
	}

tail_file() {
	_nx
	local _tmpfile="$tmpdir/tailfile"
	local _fn="$1"
	local _tailcnt=${2:-20}

	[ -r "$_fn" ] && [ -w "$_fn" ] && tail -"$_tailcnt" "$_fn" > "$_tmpfile" && cat "$_tmpfile" > "$_fn" && rm -f "$_tmpfile"
	}

extract_uci_values() {
	local _res="$( e "$@" | xargs -r -n 1 )" && _res="${_res#*=}"
	# e "extract_uci_values returns: <$_res>" 1>&2
	e "$_res"
	}

query_uci_on_host() { # query (show) possibly many UCI values from a host and return them all
	local _lines="$( ssh_cmd "uci show $1" )"
	e "$_lines"
	}

get_uci_on_host() {
	local _lines="$( ssh_cmd "{ uci get $1 ; ${2:+uci get $2 ;} ${3:+uci get $3 ;} } 2>&1" )"
	e "$_lines"
	}

query_and_extract_uci_on_host() { # query the FIRST of possibly many UCI values from a host and return its value
	local _res="$( ssh_cmd "uci show $1" | xargs -r -n 1 )" && _res="${_res#*=}"
	# debug "extract_uci_values returns: <$_res>" 1>&2
	e "$_res"
	}

get_os_data_semi_starred_cached() {
	local _data=""
	local _result="$( storage_cache_read "$1.os_data" 1 )"
	local _os_data_fn="/usr/lib/os-release" # standard on Unix by now
	local _os_pretty_name
	local _os_id

	if [ -z "$_result" ] ; then
		_data="$( ssh_cmd "cat $_os_data_fn" )" || {	_rc="$?" ; return $_rc ; } # cancel func
		if [ -n "$_data" ] ; then
			storage_cache_write "$1.os_data_lined" "$_data" # keep it for now, dont need it yet
			_result="$( echo "$_data" | awk -F= 'BEGIN { printf  "{*os*:{"
				} { printf comma "*" tolower($1) "*:" gensub("\"", "*", "g", $2)  ; comma="," } END { printf "}}" }' )" # generate new value
			 storage_cache_write "$1.os_data" "$_result"  # cache if new values successfulhy obtained
			_os_pretty_name="$( echo "$_data" |  awk -F=  '/^PRETTY_NAME=/ { print gensub("\"", "", "g", $2) }' )"
			 storage_cache_write "$1.os_pretty_name" "$_os_pretty_name"
			_os_name="$( echo "$_data" |  awk -F=  '/^NAME=/ { print gensub("\"", "", "g", $2) }' )"
			 storage_cache_write "$1.os_name" "$_os_name"
			_os_id="$( echo "$_data" |  awk -F=  '/^ID=/ { print gensub("\"", "", "g", $2) }' )"
			 storage_cache_write "$1.os_id" "$_os_id"
		fi
	fi
	printf "%s" "$_result"
	}

get_sitecode_cached() { # $1=host $2=cachetimeout
	local _data="$( storage_cache_read "$1.sitecode" "${2:-10}" )" # the site code should be stable...
	if [ -z "$_data" ] ; then
		_data="$( ssh_cmd "[ -d $gluondir ] && cat $gluondir/site.json"  )" || { _rc="$?" ; return $_rc ; }
		if [ -n "$_data" ] ; then
			_data="$( echo "$_data" | jsonfilter_func .site_code )"
			storage_cache_write "$1.sitecode" "$_data"
		fi
	fi
	printf "%s" "$_data"
	}

get_most_frequent_sitecode() {
		_nx ; set +o noglob # needed here
		local _data="$( cat "$cachedir"/*.sitecode.cached 2>/dev/null | sort | uniq -c | awk 'NR==1 { print $2 }' )"
		e "${_data:-LOCAL}"
		[ "$_data" ] || return 1
	}

get_hostname_cached() { # $1=host $2=cachetimeout
	_nx
	local _key="${1:-$sTargetHost}.hostname"
	local _data="$( storage_cache_read "$_key" "${2:-99}" )"
	if [ -z "$_data" ] ; then
		_data="$( ssh_cmd "tr A-Z a-z < /proc/sys/kernel/hostname" )" || { _rc="$?" ; echo "${1:-$sTargetHost}" ; return $_rc ; }
		debug "REMOTE hostname is: $_data"
	fi
	[ "$_data" ] && storage_cache_write "$_key" "$_data" 
	echo "$_data"
}

get_pub_iface_cached() { # $1=host $2=cachetimeout  ## TODO ## -1 for forced reloading
	_nx
	local _key="${1:-$sTargetHost}.iwinfo"
	local _dataall="$( storage_cache_read "$_key" "${2:-99}" )"
	if [ -z "$_dataall" ] ; then
		# should find a better solution based on iw ...:
		_dataall="$( ssh_cmd "command -v iwinfo >/dev/null && iwinfo" | sed -e 's/^  */;/' -e 's/   */;/' | awk '/^$/ { print l ; l = "" ; next } { l = l $0 ; next }' )" ||
				 {	_rc="$?" ; return $_rc ; }
		debug "REMOTE iwinfo returned: '$_dataall'"
		if echo "$_dataall" | grep -q "Mode: Master;.*;Encryption: none" ; then #  .... cache result only if at least one public Freifunk if is up and running
			storage_cache_write "$_key" "$_dataall"
		fi
	fi
	_data="$( echo "$_dataall" | awk -F ";" '/;Mode: Master/ && /;Encryption: none/ { print $1 } ' )"
	# setting global variables $sPubIfs, $sPubIf0, $sPubIf1 and sSsidBase as side effects...
	if [ -z "$_data" ] ; then
		sPubIfs="ERROR" ; sPubIf0="" ; sPubIf1=""
		debug "No public interface determinable: sPubIfs=$sPubIfs"
		sSsidBase=""
		return 1
	else
		sPubIfs="$( echo $_data | xargs -r echo )"
		sPubIf0="$( echo "$sPubIfs" | awk '{ print $1 }' )" # 1st interface
		sPubIf1="$( echo "$sPubIfs" | awk '{ print $2 }' )" # 2nd interface if any (e.g. 5 Ghz)
		debug "GET:" "PUBLIC interface(s): ssPubIf0=$sPubIf0,sPubIf1=$sPubIf1,sPubIfs=$sPubIfs"
		sSsidBase="$( echo "$_dataall" | awk -F ";" '/;Mode: Master/ && /;Encryption: none/ { print $2 ; exit }' | tr -d \" | awk -F ": " '{ print gensub("/.*", "", "g", $2) }' )"
		return 0
	fi
}

make_json_from_table_with_headers() { # table is piped in
	_nx
	awk -v missingHeaders="${1:-0}" 'BEGIN { OFS=""
			getline
			for (i=1; i<=NF; i++) names[i] = $i     # read headers
			printf "{"
		} {
			printf comma " *%s*:{", gensub(":", "", 1, tolower($1)) # remove any ":"
			for(i=2;i<=NF;i++) {
				printf "*%s*:*%d*%s" , names[i-missingHeaders] , $i, i == NF ? "" : ","
			}
			printf "}"
			comma=","
		}
		END { print " }" } '
  }

del_simple_json_attribute () { # $1: attr, $2: JSON-string  # but only covers very simple cases, i.e. with quotes or not  :(
    # jq -c "del($1)" <<< "$2"
	attr="$1"
	#                     a) not the last in line (,)                b) only one or last in line   
	echo "$2" | sed -E -e "s;\"$attr\":(\"[^\"]*\"|[^,}]*)[ ]*,;;" -e "s;[ ]*,[ ]*\"$attr\":(\"[^\"]*\"|[^,}]*)[ ]*};;"
}

make_json_array_from_words () {
	_nx
	awk 'BEGIN { printf "[" } { printf comma "*" $0 "*" ; comma="," } END { printf "]" }'
  }

get_gluon_domains_starred_cached() {
	local _data="$( storage_cache_read "$1.gluondomains" 1 )"

	if [ -z "$_data" ] ; then
		_data="$( ssh_cmd "ls -1 "$gluondir/domains" 2>&1" )" || {	_rc="$?" ; return $_rc ; } # cancel func
		if [ -n "$_data" ] ; then
			_data="$( echo "$_data" | sed -e 's/[^_]*_//' -e 's/.json//' )"
			storage_cache_write "$1.gluondomains" "$_data"
		fi
	fi
	e "$_data" | make_json_array_from_words
}

storage_write() { # write a key/value pair to a dir
	_nx
	if [ -z "$1" ] ; then
		e "##INVALIDPARAM##"
		error_and_exit "STORE_WRITE($1.$4, \"$2\", $3) = ##INVALIDPARAM##"
	else
		mkdir -p "$3" && echo "$2" > "$3/$1.$4"
		_rc="$?"
		debug "STORE_WRITE" "($1.$4,\"$2\",$3) = $_rc"
	fi
	}
storage_user_write() {  # write a key/value pair permanently across script invocations
	storage_write "$1" "$2" "$sUserConfigDir" "persisted"
	}
storage_cache_write() { # write a key/value pair to be cached across script invocations from the same user
	storage_write "$1" "$2" "$cachedir" "cached"
	}
storage_read() { # read key/value pair from cache or user storage  (1:searchkey, 2:cachetime, 2: filesuffix, 3:dir)
	_nx
	local _fn="$3/$1.$4"
	local _maxcachedays="${2:-2}"
	local _result=""
	local _val=""
	local _deloutput=""

	if [ -z "$1" ] ; then
		_result="##INVALIDPARAM##"
		error_and_exit "STORE_READ($1,...) with $_result"
	elif [ ! -r "$_fn" ] ; then
		_result="##NOTFOUND##"
	else
		[ "$4" = "cached" ] && _deloutput="$( find "$_fn" -mtime +"$_maxcachedays" | head -1 | xargs -r -t rm 2>&1 )" # cache invalidated after n days and remove file
		if [ -n "$_deloutput" ] ; then
			_result="##NOTFOUND##" # cache is invalid
		else
			_val="$( cat "$_fn" )" && _result="##FOUND##"  # read value from cache file
			[ "$_val" ] || _result="##EMPTY##"
		fi
	fi
	debug "STORE_READ" "($1,$2,$3,${4%ed})=\"$( shorten_string "$_val" 23 )\",$_result)" 1>&2
	echo "$_val"
	[ -z "$_val" ] && return 1
	return 0
  }

storage_cache_read() { # read a key/value pair to be cached across script invocations from the same user; empty cache after n day(s)
	_nx
	storage_read "$1" "$2" "$cachedir" "cached"
	return $?
  }

storage_user_read() { # read a key/value pair across script invocations
	storage_read "$1" "$2" "$sUserConfigDir" "persisted"
	return $?
	}

if [ -t 1 ] ; then
	TC='\e[' # https://gist.github.com/bcap/5682077#file-terminal-control-sh
	Yellow="${TC}33m" ; Cyan="${TC}36m" ; OnRed="${TC}41m" ;
	Reg="${TC}22;24m" ; RegF="${TC}39m" ; RegB="${TC}49m" ; Rst="${TC}0m"     # Reset all coloring and style
fi

error()   {
	_nx
	e -e "${OnRed}ERROR$Rst: $@" 1>&2
	}

error_and_exit() {
	_nx
	error "$* ... Exiting."
	exit 1
	}

echo_if_not_quiet() {
	_nx
	[ "$bQuiet" ] && return
	local _out="$*" && [ "$1" = "${1#\{\*}" ] && [ "$1" = "${1#\[\*}" ] || _out="$( make_json_from_starred "$*" )" # expand any "starred" pseudo-JSON
	e -e "$Cyan$_out$Rst"
	}

debug() { # output the args to stderror if option -v was set
	_nx
	[ "$bVerbose" ] && { 
	 { [ $# = 2 ] && e -e "$Yellow$1$Rst""$2" || echo "$*" ; } 1>&2 
	 return 0 
	}
	return 1
	}

shorten_string() { # shorten string $1 to at most $2 chars plus ....
	_nx
	printf "%.${2:-5}s%s" "$1" "$( [ ${#1} -gt "${2:-5}" ] && printf "..." )"
	}

jsonfilter_func() {  #  jsonfilter_func(filterexpr,moreparam)=result
	_nx
	local _data
	if [ "$jsonfilter" = "jsonfilter" ] ; then
		_data=$( jsonfilter -e "@$1" $2 ) # $2 is unquoted to avoid complaint when missing
	elif [ "$jsonfilter" = "jq" ] ; then
		_data=$( jq         -r  "$1" $2 )
	else
		error_and_exit "\$jsonfilter is undefined"
	fi
	printf "%s" "$_data"
  }
shorten_ethernet_addr_in_json() { # remove some bytes für anonymization
	[ "$1" = "skip" ] && cat && return 0
	sed -e 's/\([*"][a-f0-9][a-f0-9]:[a-f0-9][a-f0-9]:\)[a-f0-9][a-f0-9]:[a-f0-9][a-f0-9]\(:[a-f0-9][a-f0-9]:[a-f0-9][a-f0-9][*"]\)/\1...\2/g' "$@"
	}

check_read_mqqt_broker() { # for now: only trusting a broker on the same host...
	_nx
	[ "$commandsToDo" != "bridge" ] && return
	[ "$mqtthost"  != "localhost" ] && { echo_if_not_quiet "Untrusted MQTT command ignored: $command" ; return 1 ; }
	return 0
	}

check_write_mqqt_broker() { # for now: only trusting a broker on the same host...
	check_read_mqqt_broker
	}

publish_to_mqtt() {
	_nx
	[ "$cmd_mospub" = "true" ] && return 0
	debug "PUB_MQTT " "$1  $2  ${3:+ OPTIONS=$3} ${bMoreVerbose:+ (\$mqtthost=$mqtthost)}"
	$cmd_mospub ${mqtthost:+-h $mqtthost} ${sMID:+-i $sMID} -t "$1" -m "$2" -i "${sitecode}_$sTargetHost" $3  || debug "$cmd_mospub failed..." #  $3  passed without quotes on purpose
	}

make_json_from_starred() {
	e "$*" | tr \" \' | tr "*" \"
	}

publish_to_mqtt_starred() {		# _pms(expandableTopic,message,moreMsoquittoOptions)
	_nx
	if [ -n "$mqtthost" -o "$homie" ] && [ "$cmd_mospub" != "true" ] ; then
		local _topic="$( echo $1 | sed "s,^/,$sitecode/$sTargetHost/," )" # ... expand shortcuts starting with "/"
		_resi="$( make_json_from_starred "$2" )"
		publish_to_mqtt  "$_topic" "$_resi" "$3" # ...  replace double quotes by single quotes and stars by double quotes
	fi
	}
	alias _pms=publish_to_mqtt_starred

reply_to_mqtt_log() {
	_nx
	_cmd="$( echo "$command" | sed -e 's/[0-9]*$//' )" # remove any trailing digits from command
	[ "$1" ] && [ "$mqtthost" -o "$homie" ] && _pms "/$_cmd/log" "{*status*:*$1*${2:+,*details*:*$2*}${3:+,$3}$( [ "$fPipe" ] && echo ",*daemon*:*yes*")}"
	[ "$1" != "OK" -a "$1" != "ONGOING" ] && logger -p daemon.error -t "$sName $sTargetHost $1" "$2 $3"
	debug "SENT LOG " "$1 :: $2 :: $3 ::"
}

# Parameters for hass_announce:
# $1: MQTT "base topic" for states of all the device(s), e.g. "rtl/433" or "ffmuc"
# $2: Generic device model, e.g. a certain temperature sensor model 
# $3: MQTT "subtopic" for the specific device instance,  e.g. ${model}/${id}. ("..../set" indicates writeability)
# $4: Text for specific device instance and sensor type info, e.g. "(${id}) Temp"
# $5: JSON attribute carrying the state
# $6: device "class" (of sensor, e.g. none, temperature, humidity, battery), 
#     used in the announcement topic, in the unique id, in the (channel) name, 
#     and FOR the icon and the device class
# Side effects using global variables:
# $sID:    , $sManufacturer: ... used in device description
# Examples:
# hass_announce "$basetopic" "Rtl433 Bridge" "bridge/state"  "(0) SensorCount"   "value_json.sensorcount"   "none"
# hass_announce "$basetopic" "Rtl433 Bridge" "bridge/state"  "(0) MqttLineCount" "value_json.mqttlinecount" "none"
# hass_announce "$basetopic" "${model}" "${model}/${id}" "(${id}) Battery" "value_json.battery_ok" "battery"
# hass_announce "$basetopic" "${model}" "${model}/${id}" "(${id}) Temp"  "value_json.temperature_C" "temperature"
# hass_announce "$basetopic" "${model}" "${model}/${id}" "(${id}) Humid"  "value_json.humidity"       "humidity" 
# hass_announce "ffmuc" "$ad_devname"  "$node/publi../localcl.." "Readable Name"  ""   "$icontype"

hass_announce() {
	local -
	# set -x
    local _topicpart="${3%/set}" # if $3 ends in /set it is settable, but remove /set from state topic
	local _command_topic_str="$( [ "$3" != "$_topicpart" ] && echo ",*cmd_t*:*~/set*" )"  # determined by suffix ".../set"
    # local _name="$( echo "${2:+$2-}$4" | tr " " "-" | tr -d "[)()]/" )"

    local _dev_class="${6:-none}"
    if [ "$5" ] ; then
		local _devid="$( basename "$_topicpart" )"
		local _jsonpath="${5#value_json.}" # && _jsonpath="$( echo "$_jsonpath" | tr -d "][ /-" )" # "${_jsonpath//[ \/-]/}"
		local _jsonpath_red="$( echo "$_jsonpath" | tr -d "][ /-_" )"     #  "${_jsonpath//[ \/_-]/}" # cleaned and reduced, needed in unique id's
		local _configtopicpart="$( echo "$_topicpart" | tr -d "][ /-" )"
		local _value_template_str=",*value_template*:*{{ $5 \}\}*"
		local _dev_unique_id="${sID}_${_configtopicpart}"
	    local _dev_name="$2 ${_devid}" # "$2 ${_devid^}"
	else
		local _devid="$2"
		local _jsonpath=""
		local _jsonpath_red="" 
		local _configtopicpart="$( echo "$_topicpart" | tr -d "][ /-" )"
        local _value_template_str=""
		local _dev_unique_id="${sID}_$2"
	    local _dev_name="$2"
    fi
    local _topic="${sHassTopicPrefix}/$1${_configtopicpart}$_jsonpath_red/$_dev_class/config"  # e.g. homeassistant/sensor/rtl433bresser3ch109/{temperature,humidity}/config
    local _sensortopic="${1:+$1/}$_topicpart"
	# local *friendly_name*:*${2:+$2 }$4*,

    local _icon_str=",*icon*:*mdi:mdi-$_dev_class*"  # mdi icons: https://cdn.materialdesignicons.com/5.4.55/
    local _unit_str=""
    # local _channelname="$_dev_name ${_dev_class}" # ${_dev_class^}"
   	local _channelname="$_dev_name $4" # take something meaningfull
    case "$_dev_class" in
		none)			_icon_str="" ;; 
        temperature*)	_unit_str=",*unit_of_measurement*:*°C*" ;;
        humidity)		_unit_str=",*unit_of_measurement*:*%*" ;;
		clock)			_icon_str=",*icon*:*mdi:clock-outline*" ;;
        switch)			_icon_str=",*icon*:*mdi:mdi-toggle-switch*" ;;
        # battery*)     _unit_str=",*unit_of_measurement*:*B*" ;;  # 1 for "OK" and 0 for "LOW".
    esac
	local _dev_model="$2$( [ "$2" != "$_devid" ] && echo " on channel $_devid" )"
    local _device_string="*device*:{*identifiers*:[*$_dev_unique_id*],*manufacturer*:*$sManufacturer*,*model*:*$_dev_model*,*name*:*$_dev_name*,*sw_version*:*$sName*}"
    local _msg="*name*:*$_channelname*,*~*:*$_sensortopic*,*state_topic*:*~*,$_device_string,*device_class*:*$_dev_class*"
	_msg="$_msg,*unique_id*:*${sID}_${_configtopicpart}$_jsonpath_red*${_unit_str}${_value_template_str}${_command_topic_str}$_icon_str"
           # _msg="$_msg,*availability*:[{*topic*:*$1/bridge/state*}]" # STILL TO DEVELOP
           # _msg="$_msg,*json_attributes_topic*:*~*" # STILL TO DEVELOP

   	publish_to_mqtt_starred "$_topic" "{$_msg}" "-r" # publish retained announcement
  }

homie_state_is_ready() {
	# set -x
	tmpfile="$tmpdir/homie_state"
	mosquitto_sub ${mqtthost:+-h $mqtthost} ${sMID:+-i $sMID} -W 1 -C 1 -t "homie/$1/\$state" > $tmpfile  # &
	# pid=$!
	# kill $pid 2>/dev/null
	_ret="$( cat "$tmpfile" )"
	# rm $tmpfile
	expr "$_ret" = "ready" # return value
	}

h_line() {
		[ "$homie" ] || return
		publish_to_mqtt "homie/$1" "$2"
	}

h_meta() {
		_nx
		# debug "h_meta($1,$2,$3)"
		local _msg="$2" ; [ "$bDeleteAnnouncement" = "yes" ] && _msg="" # bDeleteAnnouncement used in side effect from global var
		local _topic="$( echo $1 | sed -e "s,^/,homie/$homie/,"  -e 's,\(.*/\)\([!/]*\),\1$\2,' )" # ... expand shortcuts starting with "/"

		publish_to_mqtt "$_topic" "$_msg" -r
	}

h_multi() { # 1: root, 2: name, 3: retained, 4: settable, 5: datatype, 6: unit, 7: format
		_nx
		# 	h_multi /publicwifi/clientscount "Public WiFi client count" false "" integer "#" "-1:9999"
		# debug "h_multi($1,$2,$3,$4,$5,$6)"
		_root="$1"
		if [ "$bDeleteAnnouncement" ] ; then
			# set -x 	
			hass_announce "" "$ad_devname" "homie/$sTargetHost$1"  "$2"  ""  "sensor"
			set +x
		else
			h_meta $_root/name "$2"
			[ "$3" ] && h_meta $_root/retained	"${3:-true}"  # default: true
			[ "$4" ] && h_meta $_root/settable	"${4:-false}" # default: false
			[ "$5" ] && h_meta $_root/datatype	"$5"
			[ "$6" ] && h_meta $_root/unit	"$6"
			[ "$7" ] && h_meta $_root/format	"$7"

			hass_announce "" "$ad_devname" "homie/$homie$_root$( [ "$4" = "true" ] && echo "/set" )" "$2 (Homie)" "" "sensor"
		fi
	}

announce_disco() { # $1: <homie-host>,  $2: "-d" if retained advertisements are to be deleted.
	# NB: $sTargetHost and optionally $bDeleteAnnouncement must have been set!

	local -
	local _nDay="$( storage_cache_read "$sTargetHost.nAnnouncementDay" 9999 )"

	publish_to_mqtt "debug/$1" "HOMIE ANOUNCEMENTS BEGIN (\$2=$2)"

	if [ "$2" = "-d" -o "$bDeleteAnnouncement" = "yes" ] ; then
		debug "announce_disco" "\($1,$2,bDeleteAnnouncement=$bDeleteAnnouncement\): deleting advertisements"
		bDeleteAnnouncement="yes" # used in side effect in h_meta, will be resetted further down
		# exploit remove-retained"feature of newer mosquitto versions:
		mosquitto_sub ${mqtthost:+-h $mqtthost} ${sMID:+-i $sMID} -W 1  -t "homie/$homie/#" --remove-retained --retained-only > /dev/null ||
			debug "Removal of retained topics below homie/$homie/# failed"
	else
		[ "$sSshUser" = "NOUSER" ] && { h_line "$1/\$stats/uptime" "$( cut -f 1 -d . < /proc/uptime )" ; }
	
		if [ -n "$_nDay" ] && [ "$(date "+%j")" -eq "$_nDay" -a -z "$bForceMQTTAnnounce" ] && homie_state_is_ready $1 >/dev/null ; then
			debug "ANNOUNCE_DISCO" ": skip announcements, homie state is ready... (bForceMQTTAnnounce=$bForceMQTTAnnounce)" # (re-)announce ONLY IF restart or new day or necessary
			return 0
		fi
		os_data="$( get_os_data_semi_starred_cached "$sTargetHost" 1 )" # refresh data from host if old or no data available
		ad_devname="$( echo "$1" | awk -- '{ print toupper(substr($i,1,1)) substr($i,2) }' )"
		ad_fwname="$( storage_cache_read "$sTargetHost.os_name" 9999 )"
		ad_fwversion="$( storage_cache_read "$sTargetHost.os_pretty_name" 9999 )"
		ad_impl="$( storage_cache_read "$sTargetHost.os_id" 9999 )"
		debug "announce_disco" "($1,$2): announcing with $ad_devname,$ad_fwname,$ad_fwversion,$ad_impl"
	fi

	if [ -z "$bDeleteAnnouncement" ] ; then
	h_meta /homie "3.0.1"
	h_meta /state init
	h_meta /name  "$ad_devname"

	[ "$ad_fwname"    -o "$2" ] && h_meta /fw/name        "$ad_fwname"
	[ "$ad_fwversion" -o "$2" ] && h_meta /fw/version     "$ad_fwversion"
	[ "$ad_impl"      -o "$2" ] && h_meta /implementation "$ad_impl"
	
	sManufacturer="$ad_fwversion"

	# h_meta $1 "stats/interval" 600
	h_meta /nodes		"publicwifi,gluondata,radio"
	h_meta /radio/name       "Wifi Radio"
	h_meta /radio/type       "Wifi Radio Hardware"
	h_meta /radio/properties "channel24" 
	h_meta /publicwifi/name       "Public Wifi"
	h_meta /publicwifi/type       "Public Wifi Network"
	h_meta /publicwifi/properties "clientscount,state,ssidshort"

	# h_multi() { # 1: name, 2: retained, 3: settable, 4: datatype, 5: unit, 6: format }
	# Defaults are ... settable=false   retained=true
	h_multi /radio/channel24         "Radio channel 2.4"        false "" integer ""  "1:13"
	h_multi /publicwifi/clientscount "Public WiFi client count" false "" integer "#" "-1:9999"
	# h_multi /publicwifi/lastdate "Last date sent" false "" DateTime "" ""
	h_multi /publicwifi/state        "Public WiFi state"        "" "true" boolean "" ""

	_gluondomains=$( storage_cache_read "$sTargetHost.gluondomains" 99 )
	if [ "$_gluondomains" ] ; then
		_wifi_domains="$( echo "$_gluondomains" | tr -d "][*" | awk -F= '{ printf comma $1  ; comma="," }' )" # rough hack...
		debug "wifi_domains: $_wifi_domains"
		h_multi /publicwifi/ssidshort "Public WiFi short SSID" false true enum "" "$_wifi_domains" # rough hack...
	else
		h_multi /publicwifi/ssidshort "Public WiFi short SSID" false "" string "" ""
	fi

	h_meta /gluondata/name       "Node Data"
	h_meta /gluondata/type       "Gluon Data"
	h_meta /gluondata/properties "autoupdater-branch,autoupdater-enabled,gluon-version,release,model,core-domain"

	h_multi /gluondata/autoupdater-branch "Autoupdater Branch" false "" string "" ""
	h_multi /gluondata/autoupdater-enabled "Autoupdater Enabled" false "" boolean "" ""
	h_multi /gluondata/gluon-version "Gluon Version" false "" string "" ""
	h_multi /gluondata/release "Local Release" false "" string "" ""
	h_multi /gluondata/model "Hardware Model" false "" string "" ""
	h_multi /gluondata/core-domain "Core Domain" false "" string "" ""
	h_multi /gluondata/gluon-domains "Gluon Domains" false "" string "" ""
	h_meta /state ready
	fi

	# https://www.home-assistant.io/docs/mqtt/discovery/
	if [ "$bDeleteAnnouncement" ] ; then
	    _topic="$sHassTopicPrefix" # deletes eveything below "homeassistant/sensor/..." !
		[ "$bVerbose" ] && echo "$sName: removing all announcements below $_topic..."
		mosquitto_sub ${mqtthost:+-h $mqtthost} ${sMID:+-i $sMID} -W 1  -t "$_topic/#" --remove-retained --retained-only > /dev/null ||

		publish_to_mqtt_starred "$sitecode/$1/state" "{ *event*:*cleaned*,*note*:*removed all announcements starting with $_topic* }"
	else
		hass_announce "$sitecode" "$ad_devname" "$1/radio/channel24/set" "Radio channel 2.4GHz" "" "counter" 
		hass_announce "$sitecode" "$ad_devname" "$1/publicwifi/ssidshort/set" "Public SSID Short"  "" "wifi"  # 5: value_json.count
		hass_announce "$sitecode" "$ad_devname" "$1/publicwifi/localclients" "Local Clients Count" "" "counter" 
		hass_announce "$sitecode" "$ad_devname" "$1/publicwifi/state/set"    "Public SSID State"   "" "switch"
		# hass_announce "$sitecode" "$ad_devname" "$1/publicwifi/lastdate"    "Last date wifi check" "" "clock"
	fi
	publish_to_mqtt "debug/$1" "HOMIE/HASS ANOUNCEMENTS END (bDeleteAnnouncement=$bDeleteAnnouncement)"

	bDeleteAnnouncement="" # end of side effect
	storage_cache_write "$sTargetHost.nAnnouncementDay" "$( date +%j )" # support reducing it to only once per day
  }

# Initialize our own variables:
OPTIND=1         # reset to 1 in case getopts has been used previously in the shell.
bQuiet=""
bVerbose=""

bDoAllOfIt=""
commands="" # commands="mesh-id"
option_to_query=""
write_uci_val=""

determine_cmd_mospub() {
		cmd_mospub="true" # use the command "true" as unfunctional default
		_cmv "mosquitto_pub" && cmd_mospub="mosquitto_pub"
		debug "Variable/command \$cmd_mospub is *$cmd_mospub* (true is dummy!)."
	}
determine_cmd_mospub

jsonfilter=$( command -v jq ) || jsonfilter=$( command -v jsonfilter ) || error_and_exit "jsonfilter or jq must be available."
jsonfilter=$( basename "$jsonfilter" )
_cmv json_pp || alias json_pp=cat
alias _jqbeautify="jq -Sm" ; _cmv jq || alias _jqbeautify="cat"

if [ -d $gluondir ] ; then   # I'm running on Gluon (which is based on OpenWrt)
	mqtthost="test.mosquitto.org"
	ffhosts="localhost"
	macidsfile="/tmp/phones"
elif [ -x /usr/sbin/print_map.sh ] ; then # ... could be running on some other freifunk on OpenWrt   (need to be made more granular for OpenWrt..)
	mqtthost="test.mosquitto.org"
	ffhosts="localhost"
	macidsfile="/tmp/phones"
else                                      # on rest-of-world (e.g. Raspi or some fullblown OpenWrt)
	mqtthost="localhost"
	macidsfile="/srv/openhab-conf/phones"
fi

for s in /var/log /tmp ; do # find a suitable writable dir. Prefer /var/log over /tmp on openhabian (because of zram).
	cachedir="$s/${sName%.sh}.$( id -nu )"
	tmpdir="$cachedir/$$"
	debug "Trying tmpdir=$tmpdir"
	{ [ -d "$cachedir" ] || mkdir -p "$cachedir" 2>/dev/null ; } && mkdir "$tmpdir" && chmod o-rwx "$cachedir" "$tmpdir" && break
done

debugfile="$tmpdir/debugfile"
clientcollectionfile=""
# echo "$0  "  "$@" > "$debugfile"

[ $# -eq 0 ] && { show_help ; exit 1 ; } # at least one parameter on the command line is required

while getopts "?h:Gvxql:as:pi:f:m:g:n:c:o:w:" opt   # https://wiki.bash-hackers.org/howto/getopts_tutorial
do
    case "$opt" in
    \?) show_help
		[ "$cmd_mospub" = "true" ] && error_and_exit 'mosquitto_pub is not installed (consider running "-c install"!'
        exit 1
        ;;
    h|s) ffhosts="$OPTARG" # one or more Freifunk node(s)
		if expr index ."$ffhosts" "+*" > /dev/null # substituting a '+' or a '*'' for a set of predefined hosts
		then
			# values used for + or * should be stored in the file $sUserConfigDir/myhosts.persisted:
			# "host1,host2,host3" (without double quotes)

			myhostcollection=""
			[ "$myhostcollection" ] || myhostcollection="$( storage_user_read myhosts )"
			[ "$myhostcollection" ] || error_and_exit "config for collection of hosts is missing ($sUserConfigDir/myhosts.persisted)"
			ffhosts="$( echo "$ffhosts" | sed -e "s/[+*]/$myhostcollection/g" |	tr -d -c "a-zA-Z.,-" )" # replace and sanitize
			workonallclients="yes"
		fi
        ;;
    G) bGiveHost="yes"
		;;
    v) [ "$bVerbose" = "yes" ] && bMoreVerbose="yes"
		bVerbose="yes"
		nMqttSleep=170 # not to small to allow for gathering status in between !
		;;
	x) bVerbose="yes"
		set -o xtrace
        ;;
	l)  ;;
	q) bQuiet="yes"
		;;
    t) # option unused
		;;
	a) bDoAllOfIt=yes
		bForceMQTTAnnounce="yes" # -a forces auto-discovery announcements even if retained before' ...
		;;
	m) [ "$cmd_mospub" = "true" ] && error "mosquitto_pub is missing!"
		case "$OPTARG" in     #  http://www.steves-internet-guide.com/mqtt-hosting-brokers-and-servers/
		test)	mqtthost="test.mosquitto.org" ;;
		eclipse) mqtthost="mqtt.eclipse.org"   ;;
        hivemq)	mqtthost="broker.hivemq.com"   ;;
		*) mqtthost="$( echo "$OPTARG" | tr -c -d '0-9a-zA-Z_.' )" ;; # clean up for sec purposes
		esac
		;;
	g)  mqttGroup="$OPTARG"
		;;
	p) homie="yes"
		[ "$cmd_mospub" = "true" ] && error_and_exit "MQTT client mosquitto_pub is not installed, but -$opt was requested..."
		;;
	i) sArea="$OPTARG"
		;;
	f) filetocopy="$OPTARG"
		commands="filecopy"
		;;
	n) one_additional_option="$OPTARG"
		sGrepSsid="$OPTARG"
		;;
    c) commands="$OPTARG" # one or more, comma-seperated command to be executed
        ;;
    o) option_to_query="$OPTARG" ; commands="uciquery"
		# echo option_to_query="$option_to_query"
        ;;
    w) write_uci_val="$OPTARG" ; commands="uciwrite"
		# echo write_uci_val="$write_uci_val"
        ;;
    esac
done

shift "$((OPTIND-1))"   # Discard the options parsed so far and leave the rest of the cmd line...

if [ "$homie" -o "$mqtthost" ] ; then # enable MQTT
	: debug "MQTT commands not aliased."
else
	debug "MQTT commands are aliased."
	alias _pms="true skipped _pms"
	alias h_line="true skipped h_line"
	alias h_meta="true skipped h_meta"
fi

# find a name for the collection of all clients here:
for ffhost in $( echo "${ffhosts:-localhost}" | tr -s "," " " ) # for each given host, maybe just one...
do
	if [ "$ffhost" = "localhost" ] ; then
		sSshUser="NOUSER"
		ssh_cmd() {
			# echo_if_not_quiet "$@" 1>&2
			eval "$@" # < /dev/null
		  }
		sTargetHost="$sArea"
	else
		sSshUser="root@$ffhost"
		ssh_cmd() {
			# echo_if_not_quiet "root@$ffhost:" "$@" 1>&2
			_r=$( ssh -T "root@$ffhost" -q "$@" ) 
			_rc=$?
			if [ "$_rc" -gt 0 ] ; then
				debug "SSH" " -T root@$ffhost RETURNED $_rc" 1>&2
			else
				echo "$_r" | tr -d '`'
			fi
			return $_rc
  		  }
		# remove any trailing "-<letter>"  also the domain name
		sTargetHost=$( echo "$ffhost" | awk -- '{ print gensub("-[a-z]$", "", 1, gensub("\\..*", "", 1, tolower($0) ) ) }' ) 
	fi

	[ "$sitecode" ] || sitecode="$( get_sitecode_cached "$sTargetHost" || get_most_frequent_sitecode )" # cant do it earlier: Need a $sTargetHost to determine a default...

	tmpfilemqtt="$tmpdir/mqtt.$ffhost"
	sNewSSID=""

	_string="" && [ "$sSshUser" = "${sSshUser%${sTargetHost}-e}" -a "$sSshUser" = "${sSshUser%${sTargetHost}}" ] && _string="($sTargetHost) "
	[ "$bVerbose" -o "$bGiveHost" ] && echo "\n######## ${sSshUser#root@} $_string//${commands:+ $commands //}" "$@" "########"

	if [ "$option_to_query" ] ; 	then
		uci_val="$( query_uci_on_host "$option_to_query" )"
		if [ "$bDoAllOfIt" ] ; then
			echo "$uci_val"
		else
			uci_val="$(extract_uci_values "$uci_val")"
			if [ -z "$write_uci_val" ]  ; 		then
				echo "$uci_val" # it was a query only = no writes
			elif [ "$( echo "$uci_val" | wc -l )" -gt 1 ] ; then
				error_and_exit "key :$option_to_query: had returned more than one line!"
			else
				ssh_cmd "uci set $option_to_query=$write_uci_val ; uci commit $option_to_query"
			fi
		fi	
	else
		commandsToDo="$commands"

		if [ "$commandsToDo" = "bridge" ] ; then
			# prepare subscibing for MQTT messages...
			readonly fPipe="$tmpdir/f"
			{ mkfifo "$fPipe" && chmod go-rwx "$fPipe" ; } || error_and_exit "Could not create $fPipe (rc=$?)."
			for t in $sTargetHost $mqttGroup ; do
				_prefix="-t $sitecode/$t"
				_subscriptions="$_subscriptions $_prefix/+/get $_prefix/+/+/get $_prefix/+/set $_prefix/+/+/set"
			done
			[ "$homie" ] && _subscriptions="$_subscriptions -t homie/$sTargetHost/+/+/set"
			debug "SUBSCRIBING to MQTT broker: \"$mqtthost $_subscriptions\", homie=$homie, fPipe=$fPipe"
			_last_will_options="" # "--will-topic $sitecode/$sTargetHost/mqtt/STATUS --will-payload OFF"
			mosquitto_sub -v -R ${mqtthost:+-h $mqtthost} ${sMID:+-i $sMID} $_subscriptions $_last_will_options | awk -- '{ print strftime("MQTT ") $0 ; fflush() }' > $fPipe  &  #  pipe non-stale commands from MQTT broker
			readonly nPidMosquitto=$!
			command="bridge" && reply_to_mqtt_log "ON" "Subscribed $( echo "$_subscriptions" | sed 's/-t //g' )"
			
			#  pipe periodic stuff into the pipe to make it wakeup:
			while sleep 5 ; do echo PERIODIC noop ; sleep $nMqttSleep || true ; done  > $fPipe  &  
			readonly nPidPeriodic=$!
			
			#  .. and enable a listener for the ubus bus:
			if command -v ubus > /dev/null ; then
				# set -x
				( ubus listen & echo $! >"$tmpdir/ubusPid" ) | awk -- '{ print "UBUS LISTEN " $0 ; fflush() }' > $fPipe &  
				readonly nPidUbus="$( cat "$tmpdir/ubusPid" )"
				debug "UBUS:" "Background ubus listen pid is: $( pgrep -lfa "ubus listen" )"
				ubus send "$sName" '{ "debug": "started" }' 
				set +x
			fi

			debug "Started procs: nPidMosquitto=$nPidMosquitto,nPidPeriodic=$nPidPeriodic,nPidUbus=$nPidUbus,fPipe=$fPipe"
			
			trap_function() {
					command="bridge" && reply_to_mqtt_log "ONGOING" "trapped signal."
					rm -f $fPipe
					kill $nPidPeriodic $nPidMosquitto $nPidUbus 2>/dev/null || true
 					debug "$sName: killed $nPidMosquitto $nPidPeriodic $nPidUbus, sent MQTT, now stopping at $( date )"
				}		
			trap 'trap_function' INT QUIT TERM SEGV
		fi
		# NB: OpenHab Homie autodiscovery doesn't like uppercase characters at the beginning...
		[ "$homie" ] && os_data="$( get_os_data_semi_starred_cached "$sTargetHost" 1 )" && homie="$( _tolower "$sTargetHost" )" &&
			 [ "$commandsToDo" != "homie-delete" ] && announce_disco "$homie"
	
		debug "LOOP" " START (commandsToDo=$commandsToDo)"
		while [ "$commandsToDo" ] ; do
			if [ "$commandsToDo" = "bridge" ]  ;  then
				read -r sPipeType command commandopts < "$fPipe" ; _rc="$?"
				if [ "$_rc" -ne 0 ] ; then
					sleep 1
					if [ -p $fPipe ] ; then
						_string="Read error from pipe (rc=$_rc)"
						reply_to_mqtt_log "ERROR" "$_string"
						error_and_exit "$_string: $( ls $fPipe 2>&1 )"
					else
						reply_to_mqtt_log "OK" "Exiting. Read had returned $_rc."
						exit 0
					fi
				fi
				
				if [ "$sPipeType" = "UBUS" ] ; then
					debug "TYPE=$sPipeType,$command,$commandopts"
					_pms "/ubus/log"     "$commandopts"
					commandsToDo="bridge"
					# command=noop
					continue
				elif [ "$sPipeType" != "MQTT" ] ; then
					debug "TYPE=$sPipeType,$command,$commandopts"
					commandsToDo="ffstatus,statistics,bridge"
				else
					_prefix="$( echo "$command" | awk -v FS=/ '{ print $1 "/" $2 }' )"
					_msg="$( echo "$commandopts" | awk '{ print $1 }' )" && [ "$_msg" = "(null)" ] && _msg=""
					debug "MQTT:" "command: $command  $_msg  (prefix=$_prefix, sitecode=$sitecode)"
					case "$_prefix" in
					"homie/$sTargetHost"|"$sitecode/$sTargetHost"|"$sitecode/${mqttGroup:-$sTargetHost}")
						# _fullcommand="$( echo "$command" | awk -v FS=/ 'NF && NF-1 { print $3 ( $4 && $4 != "get" ? "/" $4 : "" ) ( $5 && $5 != "get" ? "/" $5 : "" ) }' )${_msg:++$_msg}"
						command="$( echo "$command" | awk -v FS=/ 'NF && NF-1 { print $3 ( $4 && $4 != "get" ? "/" $4 : "" ) ( $5 && $5 != "get" ? "/" $5 : "" ) }' )"
						case "$command" in
						localclients*|publicwifi/localclients*)				command="localclients" ;;
						publicwifi/ssidshort/set) command="ffotherssid_$_msg" ;;
						radio/channel24/set)		command="ffchannel" ;;
						publicwifi/state/set) 	[ $_msg = "true"  -o $_msg = "ON"  ] && command="ffup"
												[ $_msg = "false" -o $_msg = "OFF" ] && command="ffdown"
											;;
						ffstatus*|radio/channel24|publicwifi/state|publicwifi/ssidshort) command="ffstatus" ;;
						ffup*)			command="ffup"   ;;
						ffdown*)		command="ffdown" ;;
						echo*)			command="echo"   ;;
						loop*)			command="loop"   ;;
						sitecode*)		command="sitecode"  ;;
						gluon-data*)	command="gluondata" ;;
						machine-data*)	command="machine-data" ;;
						ffotherssid*)		command="ffotherssid_$_msg" ;;
						esac
						;;
					*) command="$( echo "$command" | awk -v FS=/ 'NF && NF-1 { print ( $(NF-1) ) }' )"
						;; # extract last part of topic, must have at least one /
					esac
					command=${command%/get} && command=${command%/GET}
					debug "MQTT:" "Remapped to command: $command"
				fi
			else
				     command="$( echo "$commandsToDo" | cut -d "," -f 1     )"
				commandsToDo="$( echo "$commandsToDo" | cut -d "," -f 2- -s )"
			     commandopts="$( echo "$command"      | cut -d "+" -f 2- -s )" # split further...
				     command="$( echo "$command"      | cut -d "+" -f 1     )"
			fi		
			    command="$( echo "$command"     | tr -c -d "A-Za-z0-9_-" )" # for security reasons
			commandopts="$( echo "$commandopts" | tr -c -d "A-Za-z0-9_-" )" # for security reasons

			case "$command" in
			bridge|noop|ignore|echo|date)
				debug "Command=$command,$commandopts,($( date +%T ))"
				[ "$command" = "echo" ] && reply_to_mqtt_log "OK" "Command $command $commandopts"
				[ "$command" = "date" ] && reply_to_mqtt_log "OK" "Command $command: $( date )"
				;;
			loop)
				check_read_mqqt_broker || continue
				commandopts="${commandopts:-5}"
				reply_to_mqtt_log "ONGOING" "$command'ing $commandopts times"
				if [ 2 -le "$commandopts" -a "$commandopts" -lt 11 ]  ; then
					_cmd='ssh_cmd date -u +%s'
					startval="$( $_cmd )" && echo_if_not_quiet "$startval"
					for i in $( seq 2 $((commandopts - 1)) ) ; do
						_res="$( $_cmd )" ; debug "$_res"
					done &&
					endval="$( $_cmd )" && echo_if_not_quiet "$endval"
					reply_to_mqtt_log "OK" "Command $command: Performed $commandopts-times /bin/date in $(( endval - startval)) seconds: $startval-$endval"
				else
					reply_to_mqtt_log "ERROR" "Command $command: Invalid parameter '$commandopts'"
				fi
				;;
			install)
				check_read_mqqt_broker || continue
				targetuser="$( ssh_cmd "id -nu" )"
				if [ -z "$targetuser" ] ; then
					echo_if_not_quiet "targetuser on targethost could not be determined remotely. Pls debug/establish SSH setup..."
					continue # abort case
				fi

				if [ "$ffhost" != "localhost" -o "$(dirname "$0")" != "/sbin" ] && [ "$targetuser" = "root" ] ; then
					echo_if_not_quiet "Remote targetuser is $targetuser: Will try to copy this script to /sbin later..."
					commandsToDo="filecopy${commandsToDo:+,$commandsToDo}"
					filetocopy="$0"
				fi

				os_data="$( get_os_data_semi_starred_cached "$sTargetHost" 1 )"
				debug "$os_data"

				# ... try to install mosquitto if not there yet
				if [ -n "$( ssh_cmd "command -v mosquitto_pub" )" ] ; then
					echo_if_not_quiet "mosquitto_pub is already installed on $ffhost..."
				else
					echo_if_not_quiet "mosquitto_pub was not found on $ffhost... trying to determine install cmd ..."
					installcmd=$( ssh_cmd "command -v opkg || command -v apt || echo nothing" 2>/dev/null ) 				
					case "$( basename "$installcmd" )" in
					opkg)
						_cmd="opkg update ; opkg install mosquitto-client-nossl"
						echo_if_not_quiet "Executing: $_cmd"
						ssh_cmd "$_cmd" # || { echo_if_not_quiet "ssh_cmd failed: $_cmd, aborting ..." ; continue ; }
						;;
					apt)
						_cmd="apt update && apt install mosquitto-clients"
						echo_if_not_quiet "Executing: $_cmd"
						ssh_cmd "$_cmd" # || { echo_if_not_quiet "ssh_cmd failed: $_cmd, aborting ..." ; continue ; }
						;;
					nothing)
						error_and_exit "ERROR: opkg / apt not found on $ffhost. Stopping..."
						;;
					esac
				fi || { echo_if_not_quiet "ssh_cmd failed: $_cmd, aborting ..." ; continue ; }

				# now comes a Gluon-specific part - determine Gluon by checking for the UCI entry autoupdater_branch
				autoupdater_branch="$( get_uci_on_host "autoupdater.settings.branch" )"
				debug "autoupdater_branch=$autoupdater_branch"
				if [ -z "$autoupdater_branch" -o -z "$bDoAllOfIt" ] ; then  # is probably Non-Freifunk					
					echo_if_not_quiet "Stopping for target $sTargetHost (autoupdater_branch=$autoupdater_branch,bDoAllOfIt=$bDoAllOfIt)..."
					continue
				else
					storage_cache_write "$sTargetHost.autoupdater_branch" "$autoupdater_branch"
					echo_if_not_quiet "autoupdater config found ... assuming Gluon node ... add firewall rules for MQTT..."
					# works for Ulmer Software w/o Gluon, too... DONT KNOW IF NECESSARY ON ALL GLUON VERSIONS

					ssh_cmd "xargs ${bVerbose:+-t} -n 1 uci set ; uci commit" << EOF
						firewall.local_client_mqtt=rule
						firewall.local_client_mqtt.dest_port='1883'
						firewall.local_client_mqtt.src='local_client'
						firewall.local_client_mqtt.name='local_client_mqtt'
						firewall.local_client_mqtt.target='ACCEPT'
						firewall.local_client_mqtt.proto='tcp'
						firewall.wan_mqtt=rule
						firewall.wan_mqtt.dest_port='1883'
						firewall.wan_mqtt.src='wan'
						firewall.wan_mqtt.name='wan_mqtt'
						firewall.wan_mqtt.target='ACCEPT'
						firewall.wan_mqtt.proto='tcp'
						firewall.mesh_mqtt=rule
						firewall.mesh_mqtt.dest_port='1883'
						firewall.mesh_mqtt.src='mesh'
						firewall.mesh_mqtt.name='mesh_mqtt'
						firewall.mesh_mqtt.target='ACCEPT'
						firewall.mesh_mqtt.proto='tcp'
						firewall.client_mqtt=rule
						firewall.client_mqtt.dest_port='1883'
						firewall.client_mqtt.src='mesh'
						firewall.client_mqtt.name='client_mqtt_mqtt'
						firewall.client_mqtt.target='ACCEPT'
						firewall.client_mqtt.proto='tcp'
EOF
					{ ssh_cmd "[ -d $gluondir ] && gluon-reconfigure" ; } || debug "Failed to find $gluondir or gluon-reconfigure..."
				fi
				_pubcmd="$cmd_mospub -h test.mosquitto.org" # caution: Freifunk/Gluon seems to need IPV6 connectivity, not all brokers have it!
				_topic="\"$sitecode/\`tr A-Z a-z < /proc/sys/kernel/hostname\`/installation\"" # tr will run on remote host!
				debug "SENDING:" "MQTT test message: $_pubcmd $_topic"
				ssh_cmd "$_pubcmd -t $_topic -r -m \"TEST\""
				retval="$?"
				if [ $retval = 0 ] ; then
					debug "SENDING:" "$_pubcmd $_topic had succeeded, now removing retained msg again ..."
					ssh_cmd "mosquitto_sub -h test.mosquitto.org -t $_topic -v -C 1 -W 5  --remove-retained"
				else
					echo_if_not_quiet "$_pubcmd failed with $retval on remote host (might happen sometimes)"
				fi

				if ssh_cmd "crontab -l" | grep "$sName" ; then
					debug "MODIFY:" "A crontab line containing '$sName' was found... Leaving crontab unmodified."
				else
					echo_if_not_quiet "crontab entry with '$sName' not found... adding a simple one... pls modify it later!!"
					_line="2 * * * * sleep 15 ; $sName -c machine-data,statistics -m test.mosquitto.org"
					ssh_cmd "{ crontab -l ; echo \"$_line\" ; } | crontab - ; ${bVerbose:+echo crontab is now: ; crontab -l}"
				fi
				# ... still not implemented: installing it as an MQTT daemon on Gluon ...
				rcfile="/etc/rc.local"
				_result="$( ssh_cmd "cat $rcfile" )"
				_rc="$?"
				if echo "$_result" | grep "$sName" ; then
					debug "MODIFY:" "The $rcfile line containing '$sName' was found above... Leaving $rcfile unmodified."
				else
					echo_if_not_quiet "$rcfile entry with '$sName' not found... adding a simple one... pls modify it later!!"
					_line="\( sleep 100 \; $sName -c machine-data,statistics -m test.mosquitto.org \; \) \&"
					# _line="echo hallo"
					# sed -i -e "\$s/exit 0/exit 0\naaa/g" rc.local
					ssh_cmd "sed -i sav -e  \"s/^exit 0/$_line\\nexit 0/\" $rcfile ; 	 ${bVerbose:+echo $rcfile is now: ; cat $rcfile }"
				fi
				# exit 0
				;;
			filecopy)
				check_read_mqqt_broker || continue
				[ -z "$filetocopy" ] && filetocopy="$commandopts"
				_filepath="$filetocopy"
				_basename="$( basename "$_filepath" )"
				#DELETE_BEGIN#   # Delete the following script part when compressing
				_tmpfile="$cachedir/$_basename.$$"
				cp -Lpr "$_filepath" $_tmpfile &&
					sed -e '/[ \t]#DELETE_BEGIN#/,/[ \t]#DELETE_END#/d' -i $_tmpfile && 
					sed -e 's/^[ \t]*//' -e 's/\(^[ \t]*\|  *\)#\($\|#* [^"].*$\)//g' -e 's/() *{/(){/' -e 's/[\t ]*\t[\t ]*/\t/g' -e '/^$/d' -e 's/   *"/ "/g' -e 's/"   */" /g' -e 's,\$( ,$(,g' -e 's, )",)",g'  -e 's,\$(echo ,$(e ,g' -e 's,\t*$,,g' -e 's,[^"]local ,l ,' -i "$_tmpfile" && 
					#      ^Whitespace      WhiteSpace # Comment                          () *{            Whitesp tab Whitespace   emptyline     WS bef Dou Qts  WS after DblQts  spaceAfter$(     spaceBefore)"    echo to e after $(     tab at eol      local to alias l
						sed -E -i "$_tmpfile"  -e 's,[ \t]*(&&|;|>|>>|\|)[ \t]*,\1,g' && #  -e 's,[^\)]\) [^a-zA-Z],),g'    && # remove any white space around && or ; or | , but not << or <
						ash -x -n "$_tmpfile" # smoke test syntax of compressed script
				_rc=$?
				debug "FILECOPY:" "$command: $_filepath ($( wc -c < $_filepath )) trim to $_tmpfile ($( wc -c < $_tmpfile )) : rc=$_rc"
				cp -p $_tmpfile "$cachedir/$_basename.save" 2>/dev/null || true
				if [ "$_rc" != 0 ] ; then
					error_and_exit "Reducing script $_tmpfile returned error!"
				fi
				_filepath="$_tmpfile"
				#DELETE_END#
				if scp -p ${bQuiet:+-q} "$_filepath" "$sSshUser:/sbin/$_basename" ; then
					debug "FILECOPY:" "$_filepath copied to $sSshUser:/sbin/$_basename"
				else
					debug "FILECOPY:" "scp $_filepath to /sbin/$_basename failed - retrying to remote /tmp"
					scp -p "$_filepath" "$sSshUser:/tmp/$_basename" && ssh_cmd "rm /sbin/$_basename ; ln -s /tmp/$_basename /sbin"
				fi
				#DELETE_BEGIN#
				rm $_tmpfile   
				#DELETE_END#
				;;
			sh)
				check_read_mqqt_broker || continue
				ssh "$sSshUser" # start a remote shell
				;;
			homie-update|disco-update|discovery-update)
				check_read_mqqt_broker || continue
				commandsToDo="localclients,ffstatus,gluondata,machine-data,$commandsToDo"
				
				uptimecmd="cat /proc/uptime" && [ "$ffhost" != localhost ] && uptimecmd="$0 -h $ffhost $uptimecmd"
				homieuptime="$( $uptimecmd )" && h_line "$homie/\$stats/uptime" "$( echo "$homieuptime" | cut -f 1 -d . )"
				;;
			homie-delete|disco-delete|discovery-delete)
				check_read_mqqt_broker || continue
				homie="$( _tolower "$sTargetHost" )" # duplicated code...
				announce_disco "$homie" "-d"
				;;
			ffdown)
				check_read_mqqt_broker || continue
				get_pub_iface_cached # also sets sPubIfs and sSsidBase
				debug "PREPARING:" "$command on host $sTargetHost (if=$sPubIf0,$sPubIf1) ..."
				sNewSSID="$( ssh_cmd "iw dev $sPubIf0 del ${sPubIf1:+; iw dev $sPubIf1 del >/dev/null} 2>&1" )" # stop Freifunk public interface
				_rc=$?
				tempstr="$( echo "$sNewSSID" | xargs echo )"
				if [ "$_rc" -eq 237 -o $_rc -eq 1 ] ; then
					reply_to_mqtt_log "OK" "$tempstr (_rc=$_rc)"
					h_line "$homie/publicwifi/clientscount" "-1"  && sNewSSID=""
				elif [ -z "$sNewSSID" -o $_rc != 0 ] ; then
					reply_to_mqtt_log "ERROR" "sNewSSID=$tempstr (_rc=$_rc)" 
					h_line "$homie/publicwifi/clientscount" "-1"  && sNewSSID=""
				else 
					reply_to_mqtt_log "OK" "sNewSSID=$tempstr"
				fi
				debug "FFDOWN:" "Now running ffstatus"
				commandsToDo="ffstatus${commandsToDo:+,$commandsToDo}"
				;;
			ffup|ffstatus)
				get_pub_iface_cached # also sets sPubIf* and sSsidBase
				debug "PREPARING:" "$command on host $sTargetHost (if=$sPubIfs) ..."
				if [ "$command" = "ffup" ] ; then
					check_read_mqqt_broker || continue
					reply_to_mqtt_log "ONGOING" "RUNNING $command"
					tempstr="$( ssh_cmd "wifi up && sleep $wifiupsleep && iwinfo $sPubIf0 info" )" # ... ignoring any 2nd interface
				elif [ "$sNewSSID" ] ; then
					debug "REUSED:" "sNewSSID=$sNewSSID..."
					tempstr="$sNewSSID"
				else
					reply_to_mqtt_log "ONGOING" "RUNNING $command (cache unused)"
					tempstr="$( ssh_cmd "iwinfo $sPubIf0 info 2>&1" )" # ... ignoring any 2nd interface
				fi
				_rc=$?			
				# h_line "$homie/publicwifi/lastdate" "$( date -Iseconds )"
				_out="$( echo "$tempstr" | xargs echo )"
				if [ $_rc = 1 -o $_rc = 237 ] && echo "$tempstr" | grep -w -q -E "No such" ; then
					reply_to_mqtt_log "OFF" "tempstr=$_out (rc=$_rc)"
					_pms "/publicwifi/state"     "OFF"
				elif [ $_rc != 0 -o -z "$tempstr" ] || echo "$tempstr" | grep -w -q -E "open failed|connect failed|No such" ; then
					# something went wrong...
					error "rc=$_rc for exec $command - $tempstr"
					h_line "$homie/publicwifi/state" "false"
					if echo "$tempstr" | grep -w -q -E "open failed|connect failed|No such" ; then
						reply_to_mqtt_log "OK" "_out (rc=$_rc)"
						_pms "/publicwifi/state"     "OFF" # better: ERROR ?
						h_line "$homie/publicwifi/clientscount" "-1"
					elif [ $_rc = 255 ] ; then
						reply_to_mqtt_log "OFF" "rc=$_rc (unreachable?)"
						_pms "/publicwifi/state"     "OFF" # better: ERROR ?
					else
						reply_to_mqtt_log "ERROR" "rc=$_rc // $_out"
						_pms "/publicwifi/state"     "OFF"  # better: ERROR ?
					fi
				else # ... went ok.
					# set -x
					sNewSSID="$( echo "$tempstr" | sed -e '/ESSID:/s/[^:]*: //' -e 's/\"//g' -e '1q' )"
					sChannel24="$( echo "$tempstr" | awk '$3 ~ /Channel:/ { print $4 }' )"
					set +x
					echo_if_not_quiet "$sNewSSID"
					_new_short_ssid="$( printf "%s" "$sNewSSID" | sed -e 's,.*/,,' -e 's/"//g'  )"
					reply_to_mqtt_log "OK" "$sNewSSID"
					h_line "$homie/radio/channel24"		"$sChannel24"
					h_line "$homie/publicwifi/state"		"true"
					h_line "$homie/publicwifi/ssidshort" 	"$_new_short_ssid"
					_pms "/radio/channel24"     "$sChannel24"
					_pms "/publicwifi/state"     "ON"
					_pms "/publicwifi/ssidshort" "$_new_short_ssid"
				fi
				;;
			ffcond)
				check_read_mqqt_broker || continue
				get_pub_iface_cached # also sets sPubIfs and sSsidBase
				_result="$( ssh_cmd '{ for i in 1 2 2 ; do iw dev mesh0 scan ; sleep $i ; done } | tee $cachedir/wifis ; echo ++++++++++++ ; iwinfo | grep sPubIf0 '  )"
				ifresult="$( echo "$_result" | grep -A 3 '++++++++++' | grep -m 2 "client0 *ESSID:" )"
				error_and_exit "UNFINISHED CODE"
				if echo "$_result" | grep -A 9 -w '6e:a3:09:ea:31:e00' | grep -w "SSID:.$sSsidBase"
				then
					# client0   ESSID: "muenchen.freifunk.net/welt"
					echo_if_not_quiet "To be upped..."
					if [ -z "$ifresult" ] ; then commandsToDo="ffup${commandsToDo:+,$commandsToDo}" ; fi
				else	
					echo_if_not_quiet "To be downed..."
					if [ -n "$ifresult" ] ; then commandsToDo="ffdown${commandsToDo:+,$commandsToDo}" ; fi
				fi
				debug "commandsToDo=" "$commandsToDo"
				# ( ( iwinfo | fgrep client0 ) || ( wifi up ; echo wifi upped. ) )	) || ( iwinfo | fgrep client0 && iw dev client0 del ; echo if downed )
				;;
			ffchannel|ffchannel-*|radiochannel24set)
				# FIXME: only fully implemented for 2.4Ghz (first) radio
				check_read_mqqt_broker || continue
				get_pub_iface_cached "" 0 # sets sPubIfs and sSsidBase, and channel
				_channel24="$commandopts" && [ "$_channel24" ] || _channel24="${command#ffchannel-}"
				command="channel24"
				if [ "$_channel24" -lt 1 -o "$_channel24" -gt 13 ] ; then
					reply_to_mqtt_log "ERROR" "Illegal channel: $_channel24"
				fi
				reply_to_mqtt_log "ONGOING" "Setting wireless.radio0.channel=$_channel24  (if=$sPubIf0,$sPubIf0)"
				_channel24="$( echo "$_channel24" | tr -c -d "0-9" )" # for security reasons
				_result="$( ssh_cmd "uci set wireless.radio0.channel=$_channel24 && 
				        wifi up && sleep $wifiupsleep && iwinfo $sPubIf0 info | grep -w Channel 2>&1" )" # FIXME: ignoring any 2nd interface # iwinfo $sPubIf0 info
				debug "_result=****$_result*****"
				# FIXME: more code to be added
				# ...
				_rc="$?"
				;;
			ffotherssid|ffotherssid1|ffotherssid2|ffotherssid_*|ffotherssid-*)
				check_read_mqqt_broker || continue
				get_pub_iface_cached # sets sPubIfs and sSsidBase
				otherssid="${commandopts:-welt}"
				case "$command" in
					ffotherssid1)	_shortssid="uml_nord" 	;;
					ffotherssid2)	_shortssid="uml_west"	;;
					ffotherssid_*) _shortssid="$( echo ${command#ffotherssid_} | tr -d '}{)( ,.=' )"
						[ -z "$_shortssid" ] && echo_if_not_quiet "Empty shortssid: ${command#ffotherssid_}" && continue
						;;
					ffotherssid-*) _shortssid="$( echo "${command#ffotherssid-}" | tr -d '}{)( ,.=' )"
						[ -z "$_shortssid" ] && echo_if_not_quiet "Empty shortssid: ${command#ffotherssid-}" && continue
						;;
				esac
				command="ffotherssid"
				# further checks for allowed and legal  SSID values amongst gluon domains ....
				if [ "$_shortssid" = "OFFLINE" -o "$_shortssid" = "MYHOSTNAME" ] || expr "$( get_gluon_domains_starred_cached "$sTargetHost" )"  :  ".*\*${_shortssid}[*]" > /dev/null ; then
					reply_to_mqtt_log "ONGOING" "Setting short SSID: $_shortssid"
					[ "$_shortssid" = "MYHOSTNAME" ] && _shortssid="$( get_hostname_cached "$sTargetHost" )"
					reply_to_mqtt_log "ONGOING" "Setting short SSID: $_shortssid"
					otherssid="$sSsidBase/$_shortssid"
				else
					reply_to_mqtt_log "ERROR" "Illegal shortssid: $_shortssid"
					_pms "/gluondata/gluon-domains" "$( get_gluon_domains_starred_cached $sTargetHost )"
					echo_if_not_quiet "Illegal shortssid: $_shortssid" && continue
				fi
				_esc_ssid="$( echo $otherssid | sed -e 's,/,\\/,' )" # escape slashes for awk matching
				# echo ================
				_result="$( ssh_cmd "iwinfo $sPubIf0 info | sed -e 's/: /:/' -e 's/ESSID/SSIDPREV/'  -e '1q' | awk '{ print } /\"$_esc_ssid\"/ { exit(10) }' && 
						uci set wireless.client_radio0.ssid=$otherssid ${sPubIf1:+&& uci set wireless.client_radio1.ssid=$otherssid} &&
				        wifi up && sleep $wifiupsleep ; 
						iwinfo $sPubIf0 info | sed -e 's/: /:/' -e 's/ESSID/SSIDNEW/' -e '1q' " 2>&1 )" # FIXME: ignoring any 2nd interface
				# echo ----------------
				debug "_result=****$_result*****"
				_rc="$?"
				set +x

				if [ "$_rc" = 255 ] ; then
					_log="target sTargetHost not reachable (SSH retcode 255), aborting ffotherssid command...."
					echo_if_not_quiet "$_log"
					reply_to_mqtt_log "ERROR" "$_log"
					continue
				elif [ -z "$_result" ] ; then
					_log="commands for $command on host $sTargetHost returned empty string..."
					echo_if_not_quiet "$_log"
					reply_to_mqtt_log "ERROR" "$_log"
					continue
				else
					prev_ssid="$( e "$_result" | grep -m 1 SSIDPREV: | cut -d : -f 2 | tr -d \" )"
					sNewSSID="$(  e "$_result" | grep -m 1 SSIDNEW:  | cut -d : -f 2 | tr -d \" )"
					_log="Previous=$prev_ssid, now=$sNewSSID"
					if [ "$prev_ssid" = "$sNewSSID" ] ; then
						_log="$_log (no change)"
					fi
					debug "$_log"
					reply_to_mqtt_log "OK" "$_log"
					commandsToDo="ffstatus${commandsToDo:+,$commandsToDo}" # ... implicitly followed by a ffstatus
				fi
				;;
			gluonreconfigure)
				check_read_mqqt_broker || continue
				get_pub_iface_cached # sets sPubIf* and sSsidBase

				reply_to_mqtt_log "ONGOING" "Affected Interface(s): $sPubIfs"
				# 6 seconds needed for interface!
				_result="$( ssh_cmd "iwinfo $sPubIf0 info | sed -e 's/: /:/' -e 's/ESSID/SSIDPREV/' -e '1q' ; gluon-reconfigure | tail -3 ; wifi up  ; sleep $wifiupsleep ; iwinfo $sPubIf0 info | sed -e 's/: /:/' -e 's/ESSID/SSIDNEW/' -e '1q' " )"
				prev_ssid="$( echo "$_result" | grep SSIDPREV | cut -d : -f 2 )"
				sNewSSID="$( echo "$_result" | grep SSIDNEW | cut -d : -f 2 )"
				echo_if_not_quiet "$sTargetHost: Ran gluon-reconfigure, previously $prev_ssid, then wifi up, then $sNewSSID. id=$(id -nu)/$(id -u)\n"
				if [ "$prev_ssid" != "$sNewSSID" ] ; then
					commandsToDo="localclients${commandsToDo:+,$commandsToDo}"
				fi
				commandsToDo="ffstatus${commandsToDo:+,$commandsToDo}" # ... implicitly followed by a ffstatus
				;;
			sitecode)
				_data="$( get_sitecode_cached "$sTargetHost" 0 )"
				if [ -z "$_data" ] ; then
					reply_to_mqtt_log "ERROR"
				else
					echo "$_data"
				fi
				;;
			gluondata)
			  os_data="$( get_os_data_semi_starred_cached "$sTargetHost" 1 )"
			  if [ -z "$os_data" ] ; then
			  	reply_to_mqtt_log "ERROR" "Empty OS data"
			  else
			    # get all infos in one call (line by line):
				_out="$( ssh_cmd "uci get autoupdater.settings.branch 2>&1 && uci get autoupdater.settings.enabled 2>&1 && uci get gluon.core.domain 2>&1 ; lua -e 'print(require(\"platform_info\").get_model())' 2>&1 ; cat $gluondir/gluon-version 2>&1 ; cat $gluondir/release 2>&1" )"
				autoupdaterbranch="$(  echo "$_out" | sed -n -e 1p )"
				autoupdaterenabled="$( echo "$_out" | sed -n -e 2s/0/false/  -e 2s/1/true/ -e "2p" )"
				gluoncoredomain="$( echo "$_out" | sed -n -e 3p )"
				routermodel="$(     echo "$_out" | sed -n -e 4p )"
				gluonversion="$(    echo "$_out" | sed -n -e 5p )"
				gluonrelease="$(    echo "$_out" | sed -n -e 6p )"

				echo_if_not_quiet		"$os_data"
				_pms	"/gluondata/os-data" "$os_data"
				h_line              "$homie/gluondata/os-data" "$os_data"

				echo_if_not_quiet "$autoupdaterbranch"
				_pms "/gluondata/autoupdater-branch" "$autoupdaterbranch"
				h_line              "$homie/gluondata/autoupdater-branch" "$autoupdaterbranch"

				echo_if_not_quiet "$autoupdaterenabled"
				_pms "/gluondata/autoupdater-enabled" "$autoupdaterenabled"
				h_line              "$homie/gluondata/autoupdater-enabled" "$autoupdaterenabled"

				echo_if_not_quiet "$gluoncoredomain"
				_pms "/gluondata/core-domain" "$gluoncoredomain"
				h_line              "$homie/gluondata/core-domain" "$gluoncoredomain"

				echo_if_not_quiet "$routermodel"
				_pms "/gluondata/model" "$routermodel"
				h_line              "$homie/gluondata/model" "$routermodel"

				_val="TBD"
				_pms "/gluondata/site" "$_val"
				h_line              "$homie/gluondata/site" "$_val"

				echo_if_not_quiet "$gluonversion"
				_pms "/gluondata/gluon-version" "${gluonversion##v}"
				h_line              "$homie/gluondata/gluon-version" "${gluonversion##v}"
				
				echo_if_not_quiet "$gluonrelease"
				_pms "/gluondata/release" "${gluonrelease##v}"
				h_line                  "$homie/gluondata/release" "${gluonrelease##v}"

				gluondomains="$( get_gluon_domains_starred_cached $sTargetHost )"
				echo_if_not_quiet "$gluondomains"
				_pms "/gluondata/gluon-domains" "$gluondomains"
				h_line              "$homie/gluondata/gluon-domains" "$gluondomains"

			  	reply_to_mqtt_log "OK"
			  fi
			  ;;
			machine-data)
				os_data="$( get_os_data_semi_starred_cached "$sTargetHost" 1 )"
				debug "os_data=$os_data"
				_data="$( ssh_cmd "cat /proc/version /proc/cpuinfo" |  awk -v os_data="$os_data" '
					NR==1 { linuxversion=$3 ; FS=": " }
					/^machine|^Hardware/ { FS=": " ; printf "{*linuxversion*:*%s*,*machine*:*%s*,%s}", linuxversion ,$2, substr(os_data,2,length(os_data)-2) ; exit 0 }
					' )"
				if [ "$_data" ] ; then
					echo_if_not_quiet "$_data"
					_pms "/$command" "$_data"
				else
					reply_to_mqtt_log "ERROR" "Command $command failed: no output."
				fi
				;;
			speedtest|speedtest0*)
				check_read_mqqt_broker || continue
				_spparam="" ; [ "$bVerbose" ] || _spparam="-q"  ; _spparam="-q --no-check-certificate"
				sLastspeedtest="$( storage_cache_read "$sTargetHost.lastspdtest" 1 )" && sLastspeedtest=",*lastspeedtest*:*$sLastspeedtest*"
				speedtestcmd="$( storage_cache_read "$sTargetHost.lastspdtestcmd" 2 )" # prefer the previous one for at most 2 days
				# make it at least as big as the previous max (cache will time out after 2 days anyway):
				[ -z "$speedtestcmd" -o "$command" != "${command#$speedtestcmd}" ] && speedtestcmd="$command"
				_prefix="http://speedtest.tele2.net"
				case "$speedtestcmd" in
					speedtest) _url="$_prefix/1MB.zip"   ;;
					speedtest0)	_url="$_prefix/5MB.zip"  ;;
					speedtest00) _url="$_prefix/10MB.zip" ;;
					speedtest000)	_url="$_prefix/50MB.zip" ;;
					speedtest0000)	_url="$_prefix/100MB.zip" ;;
					speedtest00000)	_url="$_prefix/1GB.zip" ;;
					*)				error "speedtestcmd '$speedtestcmd' to exzessive or failed!"
									reply_to_mqtt_log "ERROR" "Last result ${_val}s or file size ${filesize}B too small."
									storage_cache_write "$sTargetHost.lastspdtestcmd" "speedtest0"
									continue
				esac
				debug "SPEEDTEST:" "fetching $_url..."
				reply_to_mqtt_log "ONGOING" "Trying $_url"
				_val=$( ssh_cmd "date -u +%s; wget $_spparam -O - $_url | wc -c ; date -u +%s"  )
				_rc="$?"
				# debug "speedtest: $_val, rc=$_rc"

				if [ "$_val" ] ; then
					starttime="$(	echo "$_val" | sed -n -e "1 p" )"
					filesize="$(	echo "$_val" | sed -n -e "2 p" )"
					endtime="$(	echo "$_val" | sed -n -e "3 p" )"
					_val="$((	endtime - starttime ))"
					speedMB="$( awk "BEGIN { printf \"%.1f\" , $filesize * 8 / ( $_val + 0.000001 ) / 1024 / 1024 }" )"
					if [ "$_val" -lt 11 -o "$filesize" -lt 10000 ] ; then
						speedtestcmd="${speedtestcmd}0" # try next bigger size
						debug "Result time ${_val}s or file size ${filesize}B too small, redoing with $speedtestcmd"
						reply_to_mqtt_log "ONGOING" "Result ${_val}s for file size ${filesize}B too small. Retrying larger file." "*speedMb*:*$speedMB*"
						commandsToDo="${speedtestcmd}${commandsToDo:+,$commandsToDo}"
						storage_cache_write "$sTargetHost.lastspdtestcmd" "$speedtestcmd" # cache bigger file speedtest for next time
					else
						echo_if_not_quiet "$speedMB"
						_pms "/speedtest" "{*speedMb*:*$speedMB*,*filesize*:*$filesize*,*elapsedtime*:*$_val*,*unit*:*Mb/s*${sLastspeedtest}}"
						storage_cache_write "$sTargetHost.lastspdtest" "$speedMB"
					fi
				else
					echo_if_not_quiet "ERROR: $_rc"
					reply_to_mqtt_log "ERROR" "{*ERROR*:*$_rc*,*file*:*$_url*${sLastspeedtest}}"
				fi
				;;
			status)
				_data="$( ssh_cmd "cat /proc/uptime /proc/loadavg" | awk '
					NR==1 { uptime=sprintf("%d", $1) }
					NR==2 { printf "{*uptime*:*%s*,*load*:*%.2f*}", uptime ,$1 }' )" # uptime in seconds
				echo_if_not_quiet "$_data"
				_pms "/$command" "$_data"
				;;
			printmap)
				check_read_mqqt_broker || continue
				_data="$( ssh_cmd "print_map.sh" )" || continue # Freifunk node info as JSON for non-Gluon systems, e.g. from Ulm
				echo "$_data" | json_pp
				_pms "/$command" "$_data"
				;;
			localclients)
				clientcollectionfile="$tmpdir/clientcollection"
				touch "$clientcollectionfile" && chmod g+w "$clientcollectionfile"
				localclientsfile="$clientcollectionfile.$sTargetHost"
				[ -r $macidsfile ] || touch $macidsfile

				_batctl_output="$( ssh_cmd "batctl tl" )"
				retval="$?"
				if [ $retval != 0 ] ;  then
					error "Connection $sSshUser failed (rc=$retval). Stopping for this node..."
				  	reply_to_mqtt_log "ERROR" "Connection failed (rc=$retval)"
				else
					echo "$_batctl_output" | awk '$3 == "[....W.]" { printf "%s\n", $1 }' | sort > $localclientsfile # | join -a 1 - "$macidsfile"
				
					awk -- "{ print strftime(\"%Y-%m-%d_%H:%M:%S \") \$0 \" $sTargetHost\" ; fflush() ; next }" $localclientsfile >> $clientcollectionfile
					
					if _cmv join && [ -r $macidsfile ] ; then  # prerequisites to join the data to a list of clients...
						{ sort -k 1 $localclientsfile | join -1 1 -2 1 -a 1 - $macidsfile | sort | uniq -w 17 > "$localclientsfile"_with_names ; } &&
								mv "$localclientsfile"_with_names "$localclientsfile"
					fi

					[ "$bVerbose" ] && echo "****  \$localclientsfile=$localclientsfile: ****" && cat "$localclientsfile"
					_lccount="$( wc -l < $localclientsfile )"
					h_line "$homie/publicwifi/clientscount" "$_lccount"
					cp -p $localclientsfile $cachedir/xx
					localclients="$( tr " " "," < "$localclientsfile" |
						awk -F, -v lccount="$_lccount" -v hname="$sTargetHost" 'BEGIN { printf "{*count*:*%s*,*localclients*:[", lccount } { printf comma " {*addr*:*%s*,*name*:*%s*,*detail*:*%s*}", $1, ($2=="") ? $1 : $2, gensub(/ *$/, "", 1, $3 " " $4 " " $5) ; comma="," } END { printf "],*host*:*%s*}",hname }' |
						  shorten_ethernet_addr_in_json ${bDoAllOfIt:+skip} )"
					while read -r _ipaddr _what _who ; do
						debug "*$_ipaddr* *$_what* *$_who*"
						_ipaddr="$( echo $_ipaddr | tr -d ':' )"
						_details="$_what $_who" && [ "$_details" ] || _details="$_ipaddr"
						_pms "$sitecode/$sArea/$_ipaddr" "{*lasthost*:*$sTargetHost*,*details*:*$_details*}"
					done < "$localclientsfile"
					echo_if_not_quiet "$localclients"
					_pms "$sitecode/$sTargetHost/publicwifi/localclients" "$localclients"
					[ "$workonallclients" ] && nCollectedSumOfClients="$(( nCollectedSumOfClients + _lccount ))"
					collectedclients="$collectedclients $( xargs < $localclientsfile )"
					collectedclients="${collectedclients% }" # trim leading spaces
				fi
				;;
			nodeinfo|neighbours|statistics)
				_rc=""
				tmpfilejson="$tmpdir/$sTargetHost.$command.tmp"
				ffnodeip="$( storage_cache_read "$sTargetHost.nodeip" 30 )"
				if [ -z "$ffnodeip" ]  ;  then
					ffnodeip="$( ssh_cmd "ip -f inet6 -o addr show dev $ifipv6" | awk -e '{ print gensub("/.*", "", "1", $4) ; exit 0 }'  )"
					_rc="$?"
					[ "$ffnodeip" ] && storage_cache_write "$sTargetHost.nodeip" "$ffnodeip" # new value > cache it
				fi
				if [ -z "$ffnodeip" ] ; then # ... was still not determinable > abort
					error "Remote node IP :$ffnodeip: is empty. Command $command aborted..."
				  	reply_to_mqtt_log "ERROR" "Remote node IP undeterminable"
				else
					_gni_cmd="gluon-neighbour-info -i br-client -p 1001 -r $command -d " # ipaddr will be appended ...
					[ "$one_additional_option" ] && ffhost="$one_additional_option" # use other host to query the remote one ...
					ssh_cmd "$_gni_cmd $ffnodeip" > "$tmpfilemqtt"
					_rc="$?"
					_val="$( cat "$tmpfilemqtt" )"
					debug "Had called $_gni_cmd > $ffnodeip (rc=$_rc)"
					returnsize="$( wc -l < "$tmpfilemqtt" )"
					if [ "$returnsize" -eq 0 ]  ;  then
						error "Connection or gluon-neighbour-info failed: Command $command on node ip $ffnodeip failed..."
						reply_to_mqtt_log "ERROR" "remote result empty (rc=$_rc)"
					else
						storage_cache_write "$sTargetHost.$command" "$_val" # cache all data to support change detection some time
						echo_if_not_quiet "$_val"
						publish_to_mqtt "$sitecode/$sTargetHost/$command" "$_val"
						if [ "$command" = "statistics" ] ; then
							# node_id=$( jq -r .node_id $tmpfilemqtt )
							# publish_to_mqtt "$sitecode/$sTargetHost/nodeid" "$node_id" "-r"
							### publish_to_mqtt "$sitecode/$node_id/$command"  "$( cat $tmpfilemqtt )"  "-r"
							# publish_to_mqtt "$sitecode/$sTargetHost/ipv6" "$ffnodeip" "-r"
							### publish_to_mqtt "$sitecode/$node_id/ipv6"      "$ffnodeip" "-r"
							_data="$( jsonfilter_func ".clients.wifi" < "$tmpfilemqtt" )"
							# echo $_val
							_pms "/clients" "$_data"
							[ "$workonallclients" ] && nCollectedSumOfClients="$(( nCollectedSumOfClients + _data ))"
							# publish_to_mqtt "$sitecode/$node_id/clients" "$_data"
						fi

						[ -f $tmpfilejson.prev ] && mv -f $tmpfilejson.prev $tmpfilejson.old
						[ -f $tmpfilejson      ] && mv -f $tmpfilejson $tmpfilejson.prev
						json_pp < "$tmpfilemqtt" > $tmpfilejson 
						chmod g+w $tmpfilejson
					fi
				fi
				;;
			showsite)
				_content="$( ssh_cmd gluon-show-site | tee $tmpfilemqtt | tr -d '\n' )"
				if [ "$_content" ] ; then
					publish_to_mqtt "$sitecode/$sTargetHost/$command" "$_content"
					[ -z "$bQuiet" ] && json_pp < $tmpfilemqtt
				else
					reply_to_mqtt_log "ERROR" "remote result empty"
					error "ssh to $sSshUser failed."
				fi
				;;
			mountsizes)
				check_read_mqqt_broker || continue
				_content="$( ssh_cmd "df -Ph -T" | sed -e 's/\([0-9]\)\.0K/\1K/g' )"
				if [ "$_content" ] ; then
					_content="$( echo "$_content" | jq -R -s '
						[ split("\n") | .[]  |
						if test("^/") or test("overlay") then
							gsub(" +"; " ") | split(" ") | {mountpoint:.[6], filesystem:.[0], type:.[1], spaceavail:.[4], spaceused:.[3], percentused:.[5], spacetotal:.[2]}
						else
							empty
						end ]' )"
					echo_if_not_quiet "$_content"
					publish_to_mqtt "${sitecode:-UNSET}/$sTargetHost/$command" "$_content"
				else
					reply_to_mqtt_log "ERROR" "remote result empty"
					error "ssh to $sSshUser for df failed."
				fi
				;;
			memory)
				check_read_mqqt_broker || continue
				_data="$( ssh_cmd "free -t" | tr -d -c "0-9 a-zA-Z:\n")"
				echo_if_not_quiet "$_data"
				_data="$( echo "$_data" | make_json_from_table_with_headers 1 )"
				_pms "/$command" "$_data"
				;;
			reboot)
				check_write_mqqt_broker || continue
				if ssh_cmd "/sbin/reboot" ; then
					reply_to_mqtt_log "OK" # might not even get here if run locally ...
				else
					_rc="$?"
					error "reboot for $sSshUser failed (rc=$_rc)"
					reply_to_mqtt_log "ERROR" "call failed (rc=$_rc)"
				fi
				;;
			wifiscan)
				check_read_mqqt_broker || continue
				# relies on the following entry in root's crontab, since only root is allowed to do a full wifi scan
				# SHELL=/bin/bash
				# * * * * * { /sbin/iw dev wlan0 scan ; sleep 2 ; /sbin/iw dev wlan0 scan ; sleep 2 ; /sbin/iw dev wlan0 scan ; } | fgrep SSID  | cut -d ":" -f 2 | xargs -n 1 | sort -u > /tmp/wifis.txt
				# { for i in 2 2 2 2 ; do /sbin/iw dev wlan0 scan ; sleep $i ; done } | fgrep SSID  | cut -d ":" -f 2 | xargs -n 1 | sort -u > /tmp/wifis.new ; mv /tmp/wifis.new /tmp/wifis.txt ; date >> /tmp/wifis.txt
				# * * * * * { for i in 1 2 1 2 ; do /sbin/iw dev wlan0 scan ; sleep $i ; done } | egrep -w '^BSS|SSID'| sed -e 's/BSS *//' -e 's/(.*//' -e 's/\t*SSID: //' -e 's/^$/./' | xargs -L2 | sort -u > /tmp/wifis.new ; mv /tmp/wifis.new /tmp/wifis.txt ; date >> /tmp/wifis.txt

				get_pub_iface_cached # sets sPubIf* and sSsidBase

				_data="$( ssh_cmd "[ \"$(id -u)\" = 0 ] || echo ERROR && iw dev $sPubIf0 scan ${sPubIf1:+&& iw dev $sPubIf1 scan} " )"
				_rc="$?"

				if [ $_rc = 0 ] ; then
					# _data="$( echo "$_data" | awk '$1 ~ /^SSID/ { sub("\t*SSID: *", "") ; if (length($0)) print } { next }' | sort -u | make_json_array_from_words)"
					# set -x
					_data="$( echo "$_data" | awk '
							/^BSS / 	{ MAC 	= gensub("(.*", "", 1, $2)  }
							/signal:/  	{ signal[MAC] 	= gensub(".00", "", 1, $2) }
							/SSID:/  	{ ssid[MAC] 	= $2 }
							/primary channel:/ {  channel[MAC] = $NF  }
							END {
								printf "%s\t%s\t%s\t%s\n", "MAC", "signal", "channel", "SSID"
								for (mac in ssid)  {  printf "%s\t%s\t%s\t%s\n", mac, signal[mac], channel[mac], ssid[mac] }
							} ' )"
					echo_if_not_quiet "$_data"
					_pms "/$command" "$_data"
					# reply_to_mqtt_log "OK" "$_data"
				else
					echo_if_not_quiet "ssh command $command failed (rc=$_rc)"
					reply_to_mqtt_log "ERROR" "rc=$_rc // $_data"
				fi
				continue

				# FIXME:
				debug "$sName: command scandirty grepping for **$sGrepSsid**"
				grep -wi "$sGrepSsid" "$cachedir/wifis.txt" 
				rm -f "$cachedir/wifis.txt.hint"
				# exit 0
				;;
			*)
				echo_if_not_quiet "Illegal command=$command"
				check_read_mqqt_broker || continue
				error_and_exit "Unknown command: $command"
			esac
		done
	fi
	
	if [ $# -gt 0 ]
	then
		# ... everything that's left in "$@" is taken as shell commands, too....
		ssh_cmd "$@"
	fi
done

if [ -n "$nCollectedSumOfClients" ] ; then
	[ "$bVerbose" -o "$bGiveHost" ] && echo "\n######  ALL CLIENTS " "$@" "######"
	publish_to_mqtt "$sArea/publicwifi/allclientscount" "$nCollectedSumOfClients"

	if [ "$clientcollectionfile" ] ; then
		sort_and_tail_file "$clientcollectionfile" 18 1
		[ "$bVerbose" ] && echo $clientcollectionfile: && cat "$clientcollectionfile"
		if _cmv join && [ -r $macidsfile ]; then
			_ccwn_fn="${clientcollectionfile}_with_names"
			{ sort -k 2 "$clientcollectionfile" | join -1 2 -2 1 -a 1 - $macidsfile | sort -r -k 1 |
			uniq -w 17 | sort -k 2 > "$_ccwn_fn" ; } && debug "$_ccwn_fn:" && debug "$(cat "$_ccwn_fn")"
			mv "$_ccwn_fn" "$clientcollectionfile"
		fi
		_data="$( awk -F" " -v id="$sArea" -v lccount="$nCollectedSumOfClients" 'BEGIN { printf "{*count*:*%s*,*id*:*%s*,*localclients*:[", lccount, id } { printf comma "{*addr*:*%s*,*name*:*%s*}", $1 , ($4=="")? $1 : $4 $5 $6 $7 ; comma="," } END { printf "]}" }' < "$clientcollectionfile" |
			shorten_ethernet_addr_in_json ${bDoAllOfIt:+skip} )"
		echo_if_not_quiet "$( make_json_from_starred "$_data" | json_pp )"
		_pms "$sitecode/$sArea/alllocalclients" "$_data"
	fi
fi

# clean up older stuff...
find "$tmpdir" -mindepth 1 -exec mv '{}' "$cachedir" \; 
rmdir "$tmpdir"
find "$cachedir" -maxdepth 1 -path "$cachedir/[0-9]*" -type d -mtime +0 -exec rm -r '{}' \; # remove old debug files

# End of main.